/*
 * grunt-contrib-manifest
 * http://gruntjs.com/
 *
 * Copyright (c) 2012 Tim Branyen, contributors
 * Licensed under the MIT license.
 * https://github.com/gruntjs/grunt-contrib-jst/blob/master/LICENSE-MIT
 */

module.exports = function (grunt) {
  "use strict";

  grunt.registerMultiTask("manifest", "Generate HTML5 cache manifest", function () {

    var options = this.options({verbose: true, timestamp: true});
    var done = this.async();
    var contents = "CACHE MANIFEST\n";

    // If we have a basePath, specify it
    if (options.basePath) {
      grunt.file.setBase(options.basePath);
    }

    grunt.verbose.writeflags(options, "Options");

    this.files.forEach(function(file) {

      var files = file.src;

      // "src" is required
      if (files === undefined) {
        grunt.fatal("Need to specify source directory for the files.", 2);
      }

      // Exclude files
      if (options.exclude) {
        files = files.filter(function (item) {
          return options.exclude.indexOf(item) === -1;
        });
      }

      // Set default destination file
      if (!file.dest) {
        file.dest = "manifest.appcache";
      }

      if (options.verbose) {
        contents += "# This manifest was generated by grunt-contrib-manifest HTML5 Cache Manifest Generator\n";
      }

      if (options.timestamp) {
        contents += "# Time: " + new Date() + "\n";
      }

      // Cache section
      contents += "\nCACHE:\n";

      files.forEach(function (item) {
        contents += item + "\n";
      });

      // Network section
      if (options.network) {
        contents += "\nNETWORK:\n";
        options.network.forEach(function (item) {
          contents += item + "\n";
        });
      } else {
        // If there's no network section, add a default "*" wildcard
        contents += "\nNETWORK:\n";
        contents += "*\n";
      }

      // Fallback section
      if (options.fallback) {
        contents += "\nFALLBACK:\n";
        options.fallback.forEach(function (item) {
          contents += item + "\n";
        });
      }

      // Settings section
      if (options.preferOnline) {
        contents += "\nSETTINGS:\n";
        contents += "prefer-online\n";
      }

      grunt.verbose.writeln("\n" + (contents).yellow);

      grunt.file.write(file.dest || "manifest.cache", contents);

      done();

    });

  });

};